
/* 
 * File:   TMDC.cpp
 * Author:  Paul Cazeaux
 * 
 * Created on June 12, 2017, 9:00 AM
 */

#include "TMDC.h"

using namespace TMDC;

double Coupling::Intralayer::MoS2(const Orbital orbit_row,  const Orbital orbit_col, 
                                        std::array<int, 2> vector)
{
    /* Lookup table of coefficients */
    const double onsite[11][11] = 
       {
            { 1.429200, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 1.429200, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.224400, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.449800, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.449800, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-1.849550, 0.000000, 0.000000,-0.308150, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-1.849550, 0.000000, 0.000000,-0.308150, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-2.086400, 0.000000, 0.000000, 1.059700},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.308150, 0.000000, 0.000000,-1.849550, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.308150, 0.000000, 0.000000,-1.849550, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.059700, 0.000000, 0.000000,-2.086400}
       };
    const double H_posd1[11][11] = 
       {
            {-0.293984, 0.364035, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.364035, 0.045895, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.423286, 0.162693, 0.582001, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.162693, 0.390321, 0.353378, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.582001,-0.353378,-0.793004, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.043097, 0.063972, 0.003991, 0.027643,-0.018781,-0.120784},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.063972,-0.106405,-0.035449, 0.018781, 0.113330,-0.044252},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.003991,-0.035449,-0.214512,-0.120784, 0.044252, 0.010388},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.027643,-0.018781, 0.120784, 1.043097, 0.063972,-0.003991},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.018781, 0.113330, 0.044252,-0.063972,-0.106405, 0.035449},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.120784,-0.044252, 0.010388, 0.003991, 0.035449,-0.214512}
       };
    const double H_posd2[11][11] = 
       {
            {-0.039075,-0.511207, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.216863,-0.209014, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.423286, 0.585374,-0.150104, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.422681,-0.497173, 0.159017, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.431897, 0.865773, 0.094490, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.180971, 0.433777,-0.028704, 0.091909,-0.018323,-0.098716},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.561721, 0.755722, 0.021181,-0.055885, 0.049065,-0.082476},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.032695, 0.014268,-0.214512,-0.022068,-0.126728, 0.010388},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.091909,-0.018323, 0.098716, 0.180971, 0.433777, 0.028704},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.055885, 0.049065, 0.082476, 0.561721, 0.755722,-0.021181},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.022068, 0.126728, 0.010388, 0.032695,-0.014268,-0.214512}
       };
    const double H_posd3[11][11] = 
       {
            {-0.039075, 0.511207, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.216863,-0.209014, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.423286,-0.585374,-0.150104, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.422681,-0.497173,-0.159017, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.431897,-0.865773, 0.094490, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.180971,-0.433777, 0.028704, 0.091909, 0.018323, 0.098716},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.561721, 0.755722, 0.021181, 0.055885, 0.049065,-0.082476},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.032695, 0.014268,-0.214512, 0.022068,-0.126728, 0.010388},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.091909, 0.018323,-0.098716, 0.180971,-0.433777,-0.028704},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.055885, 0.049065, 0.082476,-0.561721, 0.755722,-0.021181},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.022068, 0.126728, 0.010388,-0.032695,-0.014268,-0.214512}
       };
    const double H_negd1[11][11] = 
       {
            {-0.293984,-0.364035, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.364035, 0.045895, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.423286,-0.162693, 0.582001, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.162693, 0.390321,-0.353378, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.582001, 0.353378,-0.793004, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.043097,-0.063972,-0.003991, 0.027643, 0.018781, 0.120784},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.063972,-0.106405,-0.035449,-0.018781, 0.113330,-0.044252},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.003991,-0.035449,-0.214512, 0.120784, 0.044252, 0.010388},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.027643, 0.018781,-0.120784, 1.043097,-0.063972, 0.003991},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.018781, 0.113330, 0.044252, 0.063972,-0.106405, 0.035449},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.120784,-0.044252, 0.010388,-0.003991, 0.035449,-0.214512}
       };
    const double H_negd2[11][11] = 
       {
            {-0.039075, 0.216863, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.511207,-0.209014, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.423286, 0.422681,-0.431897, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.585374,-0.497173, 0.865773, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.150104, 0.159017, 0.094490, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.180971, 0.561721,-0.032695, 0.091909,-0.055885, 0.022068},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.433777, 0.755722, 0.014268,-0.018323, 0.049065, 0.126728},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.028704, 0.021181,-0.214512, 0.098716, 0.082476, 0.010388},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.091909,-0.055885,-0.022068, 0.180971, 0.561721, 0.032695},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.018323, 0.049065,-0.126728, 0.433777, 0.755722,-0.014268},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.098716,-0.082476, 0.010388, 0.028704,-0.021181,-0.214512}
       };
    const double H_negd3[11][11] = 
       {
            {-0.039075,-0.216863, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.511207,-0.209014, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.423286,-0.422681,-0.431897, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.585374,-0.497173,-0.865773, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.150104,-0.159017, 0.094490, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.180971,-0.561721, 0.032695, 0.091909, 0.055885,-0.022068},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.433777, 0.755722, 0.014268, 0.018323, 0.049065, 0.126728},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.028704, 0.021181,-0.214512,-0.098716, 0.082476, 0.010388},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.091909, 0.055885, 0.022068, 0.180971,-0.561721,-0.032695},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.018323, 0.049065,-0.126728,-0.433777, 0.755722,-0.014268},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.098716,-0.082476, 0.010388,-0.028704,-0.021181,-0.214512}
       };
    const double H_d4[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.083022, 0.971982, 0.909738,-1.083022,-0.971982, 0.909738},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.971982,-0.039326, 0.525238,-0.971982, 0.039326, 0.525238},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.620258, 0.358106,-0.673097, 0.620258, 0.358106, 0.673097},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.641121,-0.250590, 0.629032, 0.641121,-0.250590,-0.629032},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.250590, 0.930478, 0.363172,-0.250590, 0.930478,-0.363172},
            { 1.083022, 0.971982, 0.620258, 0.641121,-0.250590, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.971982,-0.039326, 0.358106,-0.250590, 0.930478, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.909738, 0.525238,-0.673097, 0.629032, 0.363172, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-1.083022,-0.971982, 0.620258, 0.641121,-0.250590, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.971982, 0.039326, 0.358106,-0.250590, 0.930478, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.909738, 0.525238, 0.673097,-0.629032,-0.363172, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };
    const double H_d5[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.600500, 0.000000, 0.000000, 0.600500, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.644196,-1.050476, 0.000000,-1.644196,-1.050476},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.716213,-0.673097, 0.000000,-0.716213, 0.673097},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.075157, 0.000000, 0.000000, 1.075157, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.496443,-0.726344, 0.000000, 0.496443, 0.726344},
            {-0.600500, 0.000000, 0.000000, 1.075157, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 1.644196,-0.716213, 0.000000, 0.496443, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000,-1.050476,-0.673097, 0.000000,-0.726344, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.600500, 0.000000, 0.000000, 1.075157, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000,-1.644196,-0.716213, 0.000000, 0.496443, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000,-1.050476, 0.673097, 0.000000, 0.726344, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000} 
       };
    const double H_d6[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.083022,-0.971982,-0.909738,-1.083022, 0.971982,-0.909738},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.971982,-0.039326, 0.525238, 0.971982, 0.039326, 0.525238},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.620258, 0.358106,-0.673097,-0.620258, 0.358106, 0.673097},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.641121, 0.250590,-0.629032, 0.641121, 0.250590, 0.629032},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.250590, 0.930478, 0.363172, 0.250590, 0.930478,-0.363172},
            { 1.083022,-0.971982,-0.620258, 0.641121, 0.250590, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.971982,-0.039326, 0.358106, 0.250590, 0.930478, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.909738, 0.525238,-0.673097,-0.629032, 0.363172, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-1.083022, 0.971982,-0.620258, 0.641121, 0.250590, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.971982, 0.039326, 0.358106, 0.250590, 0.930478, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.909738, 0.525238, 0.673097, 0.629032,-0.363172, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };
    const double H_d7[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.125743,-0.057583, 0.000000,-0.125743, 0.057583},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.205739,-0.185089, 0.000000,-0.205739, 0.185089},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.125743, 0.000000,-0.205739, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.057583, 0.000000,-0.185089, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.125743, 0.000000,-0.205739, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.057583, 0.000000, 0.185089, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };
    const double H_d8[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.108897, 0.062872,-0.057583, 0.108897, 0.062872, 0.057583},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.154304,-0.089087, 0.160292,-0.154304,-0.089087,-0.160292},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.089087,-0.051435, 0.092545,-0.089087,-0.051435,-0.092545},
            { 0.000000, 0.000000, 0.108897,-0.154304,-0.089087, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.062872,-0.089087,-0.051435, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.057583, 0.160292, 0.092545, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.108897,-0.154304,-0.089087, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.062872,-0.089087,-0.051435, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.057583,-0.160292,-0.092545, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };
    const double H_d9[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.108897, 0.062872,-0.057583,-0.108897, 0.062872, 0.057583},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.154304, 0.089087,-0.160292,-0.154304, 0.089087, 0.160292},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.089087,-0.051435, 0.092545, 0.089087,-0.051435,-0.092545},
            { 0.000000, 0.000000,-0.108897,-0.154304, 0.089087, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.062872, 0.089087,-0.051435, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.057583,-0.160292, 0.092545, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.108897,-0.154304, 0.089087, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.062872, 0.089087,-0.051435, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.057583, 0.160292,-0.092545, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };
    /**
     * Compute hexagonal homogeneous coordinates from grid coordinates.
     * We use the following system:
     *
     *                M                   M                 |             (-1,2,-1)            (1,1,-2)              
     *         (-1/2, sqrt(3)/2)                            |                                                       
     *                          .                           |                        (0,1,-1)                        
     *                                                      |                                                       
     *                X                   X                 |              (-1,1,0)            (1,0,-1)             
     *                                                      |                                                       
     *                                                      |                                                       
     *      M                   M                    M      |   (-2,1,1)             (0,0,0)              (2,-1,-1)   
     *                        (0,0)                (1,0)    |                                                       
     *                                                      |                                                       
     *                .                   .                 |              (-1,0,1)            (1,-1,0)              
     *                                                      |                                                       
     *                          X                           |                        (0,-1,1)                       
     *                                                      |                                                       
     *                M                   M                 |             (-1,-1,2)            (1,-2,1)             
     *                                                                    
     * In this system, the distance between a point and the center is still the euclidean distance, on all three coordinates.
     */
    std::array<int, 2> hom_vec = {   2 * vector[0] +  -1 * vector[1],
                                    -1 * vector[0] +   2 * vector[1] };
       // redundant 3rd coordinate: -1 * vector[0] -   1 * vector[1]

    /* Shift the arrow vector by the orbital coordinates */
    if (atom(orbit_col) == Atom::M && (atom(orbit_row) == Atom::X_A || atom(orbit_row) == Atom::X_B))
    {
        hom_vec[0] -=  1;
        // hom_vec[2] -= -1;
    }
    else if ((atom(orbit_col) == Atom::X_A || atom(orbit_col) == Atom::X_B) && atom(orbit_row) == Atom::M)
    {
        hom_vec[0] +=  1;
        // hom_vec[2] += -1;
    }

    /* Compute the distance to the origin: 
     * we use the identity r = x^2 + y^2 + z^2 = x^2 + y^2 + (x+y)^2 = 2 * (x * (x+y) + y^2) 
     */
    int r = hom_vec[0] * (hom_vec[0] + hom_vec[1]) + hom_vec[1]*hom_vec[1];
    
    switch (r)
    {
        case 0:
            return onsite[index(orbit_row)][index(orbit_col)];
        case 1:
        {
            if (hom_vec[0] == 0) 
                return H_d5[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[1] == 0) 
                return H_d4[index(orbit_row)][index(orbit_col)];
            else // hom_vec[2] == 0
                return H_d6[index(orbit_row)][index(orbit_col)];
        }
        case 3:
        {
            if (hom_vec[0] == -2)
                return H_posd1[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[0] == -1 && hom_vec[1] == -1)
                return H_posd2[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[1] == -2)
                return H_posd3[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[0] == 2)
                return H_negd1[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[0] == 1 && hom_vec[1] == 1)
                return H_negd2[index(orbit_row)][index(orbit_col)];
            else // (hom_vec[1] == 2)
                return H_negd3[index(orbit_row)][index(orbit_col)];
        }
        case 4:
        {
            if (hom_vec[0] == 0)
                return H_d7[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[1] == 0)
                return H_d8[index(orbit_row)][index(orbit_col)];
            else // hom_vec[2] == 0
                return H_d9[index(orbit_row)][index(orbit_col)];
        }
        default:
            return 0.;
    }   
}


double Coupling::Intralayer::WSe2(const Orbital orbit_row,  const Orbital orbit_col, 
                                        std::array<int, 2> vector)
{
    double onsite[11][11] = 
        {
            { 1.034900, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 1.034900, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.166700, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.098400, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.098400, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-1.787850, 0.000000, 0.000000,-0.394150, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-1.787850, 0.000000, 0.000000,-0.394150, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-2.160750, 0.000000, 0.000000, 1.203450},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.394150, 0.000000, 0.000000,-1.787850, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.394150, 0.000000, 0.000000,-1.787850, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.203450, 0.000000, 0.000000,-2.160750}
        };
    double H_posd1[11][11] = 
        {
            {-0.139500, 0.232100, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.232100, 0.012900, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.333000, 0.125000, 0.423300, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.125000, 0.319000, 0.245600, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.423300,-0.245600,-0.583700, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.011650, 0.097350, 0.053000, 0.035350, 0.005350,-0.132700},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.097350,-0.097800,-0.064450,-0.005350, 0.100700,-0.026750},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.053000,-0.064450,-0.228500,-0.132700, 0.026750, 0.011400},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.035350, 0.005350, 0.132700, 1.011650, 0.097350,-0.053000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.005350, 0.100700, 0.026750,-0.097350,-0.097800, 0.064450},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.132700,-0.026750, 0.011400, 0.053000, 0.064450,-0.228500}
        };
    double H_posd2[11][11] = 
        {
            {-0.025200,-0.298091, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.166109,-0.101400, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.333000, 0.429089,-0.103397, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.304089,-0.358025, 0.145281, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.319903, 0.636481, 0.093325, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.179562, 0.383056,-0.029315, 0.084362,-0.033647,-0.089516},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.577756, 0.734287, 0.078124,-0.022947, 0.051688,-0.101547},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.082315,-0.013674,-0.228500,-0.043184,-0.128297, 0.011400},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.084362,-0.033647, 0.089516, 0.179562, 0.383056, 0.029315},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.022947, 0.051688, 0.101547, 0.577756, 0.734287,-0.078124},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.043184, 0.128297, 0.011400, 0.082315, 0.013674,-0.228500}
        };
    double H_posd3[11][11] = 
        {
            {-0.025200, 0.298091, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.166109,-0.101400, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.333000,-0.429089,-0.103397, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.304089,-0.358025,-0.145281, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.319903,-0.636481, 0.093325, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.179562,-0.383056, 0.029315, 0.084362, 0.033647, 0.089516},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.577756, 0.734287, 0.078124, 0.022947, 0.051688,-0.101547},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.082315,-0.013674,-0.228500, 0.043184,-0.128297, 0.011400},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.084362, 0.033647,-0.089516, 0.179562,-0.383056,-0.029315},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.022947, 0.051688, 0.101547,-0.577756, 0.734287,-0.078124},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.043184, 0.128297, 0.011400,-0.082315, 0.013674,-0.228500}
        };
    double H_negd1[11][11] = 
        {
            {-0.139500,-0.232100, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.232100, 0.012900, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.333000,-0.125000, 0.423300, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.125000, 0.319000,-0.245600, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.423300, 0.245600,-0.583700, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.011650,-0.097350,-0.053000, 0.035350,-0.005350, 0.132700},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.097350,-0.097800,-0.064450, 0.005350, 0.100700,-0.026750},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.053000,-0.064450,-0.228500, 0.132700, 0.026750, 0.011400},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.035350,-0.005350,-0.132700, 1.011650,-0.097350, 0.053000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.005350, 0.100700, 0.026750, 0.097350,-0.097800, 0.064450},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.132700,-0.026750, 0.011400,-0.053000, 0.064450,-0.228500}
        };
    double H_negd2[11][11] = 
        {
            {-0.025200, 0.166109, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.298091,-0.101400, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.333000, 0.304089,-0.319903, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.429089,-0.358025, 0.636481, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.103397, 0.145281, 0.093325, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.179562, 0.577756,-0.082315, 0.084362,-0.022947, 0.043184},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.383056, 0.734287,-0.013674,-0.033647, 0.051688, 0.128297},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.029315, 0.078124,-0.228500, 0.089516, 0.101547, 0.011400},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.084362,-0.022947,-0.043184, 0.179562, 0.577756, 0.082315},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.033647, 0.051688,-0.128297, 0.383056, 0.734287, 0.013674},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.089516,-0.101547, 0.011400, 0.029315,-0.078124,-0.228500}
        };
    double H_negd3[11][11] = 
        {
            {-0.025200,-0.166109, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.298091,-0.101400, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.333000,-0.304089,-0.319903, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.429089,-0.358025,-0.636481, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.103397,-0.145281, 0.093325, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.179562,-0.577756, 0.082315, 0.084362, 0.022947,-0.043184},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.383056, 0.734287,-0.013674, 0.033647, 0.051688, 0.128297},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.029315, 0.078124,-0.228500,-0.089516, 0.101547, 0.011400},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.084362, 0.022947, 0.043184, 0.179562,-0.577756,-0.082315},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.033647, 0.051688,-0.128297,-0.383056, 0.734287, 0.013674},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.089516,-0.101547, 0.011400,-0.029315,-0.078124,-0.228500}
        };
    double H_d4[11][11] = 
        {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.969267, 0.875754, 0.858179,-0.969267,-0.875754, 0.858179},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.875754,-0.041967, 0.495470,-0.875754, 0.041967, 0.495470},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.553830, 0.319754,-0.636255, 0.553830, 0.319754, 0.636255},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.550889,-0.254716, 0.523456, 0.550889,-0.254716,-0.523456},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.254716, 0.845010, 0.302217,-0.254716, 0.845010,-0.302217},
            { 0.969267, 0.875754, 0.553830, 0.550889,-0.254716, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.875754,-0.041967, 0.319754,-0.254716, 0.845010, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.858179, 0.495470,-0.636255, 0.523456, 0.302217, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.969267,-0.875754, 0.553830, 0.550889,-0.254716, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.875754, 0.041967, 0.319754,-0.254716, 0.845010, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.858179, 0.495470, 0.636255,-0.523456,-0.302217, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
        };
    double H_d5[11][11] = 
        {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.547583, 0.000000, 0.000000, 0.547583, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.474883,-0.990939, 0.000000,-1.474883,-0.990939},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.639507,-0.636255, 0.000000,-0.639507, 0.636255},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.992071, 0.000000, 0.000000, 0.992071, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.403829,-0.604435, 0.000000, 0.403829, 0.604435},
            {-0.547583, 0.000000, 0.000000, 0.992071, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 1.474883,-0.639507, 0.000000, 0.403829, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000,-0.990939,-0.636255, 0.000000,-0.604435, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.547583, 0.000000, 0.000000, 0.992071, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000,-1.474883,-0.639507, 0.000000, 0.403829, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000,-0.990939, 0.636255, 0.000000, 0.604435, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
        };
    double H_d6[11][11] = 
        {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.969267,-0.875754,-0.858179,-0.969267, 0.875754,-0.858179},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.875754,-0.041967, 0.495470, 0.875754, 0.041967, 0.495470},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.553830, 0.319754,-0.636255,-0.553830, 0.319754, 0.636255},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.550889, 0.254716,-0.523456, 0.550889, 0.254716, 0.523456},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.254716, 0.845010, 0.302217, 0.254716, 0.845010,-0.302217},
            { 0.969267,-0.875754,-0.553830, 0.550889, 0.254716, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.875754,-0.041967, 0.319754, 0.254716, 0.845010, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.858179, 0.495470,-0.636255,-0.523456, 0.302217, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.969267, 0.875754,-0.553830, 0.550889, 0.254716, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.875754, 0.041967, 0.319754, 0.254716, 0.845010, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.858179, 0.495470, 0.636255, 0.523456,-0.302217, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
        };
    double H_d7[11][11] = 
        {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.113703,-0.047800, 0.000000,-0.113703, 0.047800},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.171403,-0.185121, 0.000000,-0.171403, 0.185121},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.113703, 0.000000,-0.171403, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.047800, 0.000000,-0.185121, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.113703, 0.000000,-0.171403, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.047800, 0.000000, 0.185121, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
        };
    double H_d8[11][11] = 
        {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.098469, 0.056851,-0.047800, 0.098469, 0.056851, 0.047800},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.128552,-0.074220, 0.160319,-0.128552,-0.074220,-0.160319},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.074220,-0.042851, 0.092560,-0.074220,-0.042851,-0.092560},
            { 0.000000, 0.000000, 0.098469,-0.128552,-0.074220, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.056851,-0.074220,-0.042851, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.047800, 0.160319, 0.092560, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.098469,-0.128552,-0.074220, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.056851,-0.074220,-0.042851, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.047800,-0.160319,-0.092560, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
        };
    double H_d9[11][11] = 
        {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.098469, 0.056851,-0.047800,-0.098469, 0.056851, 0.047800},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.128552, 0.074220,-0.160319,-0.128552, 0.074220, 0.160319},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.074220,-0.042851, 0.092560, 0.074220,-0.042851,-0.092560},
            { 0.000000, 0.000000,-0.098469,-0.128552, 0.074220, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.056851, 0.074220,-0.042851, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.047800,-0.160319, 0.092560, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.098469,-0.128552, 0.074220, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.056851, 0.074220,-0.042851, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.047800, 0.160319,-0.092560, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
        };


    /* Compute hexagonal homogeneous coordinates from grid coordinates.
     * We use the following system:
     *
     *                M                   M                 |             (-1,2,-1)            (1,1,-2)              
     *         (-1/2, sqrt(3)/2)                            |                                                       
     *                          .                           |                        (0,1,-1)                        
     *                                                      |                                                       
     *                X                   X                 |              (-1,1,0)            (1,0,-1)             
     *                                                      |                                                       
     *                                                      |                                                       
     *      M                   M                    M      |   (-2,1,1)             (0,0,0)              (2,-1,-1)   
     *                        (0,0)                (1,0)    |                                                       
     *                                                      |                                                       
     *                .                   .                 |              (-1,0,1)            (1,-1,0)              
     *                                                      |                                                       
     *                          X                           |                        (0,-1,1)                       
     *                                                      |                                                       
     *                M                   M                 |             (-1,-1,2)            (1,-2,1)             
     *                                                                    
     * In this system, the distance between a point and the center is still the euclidean distance, on all three coordinates.
     */
    std::array<int, 2> hom_vec = {   2 * vector[0] +  -1 * vector[1],
                                    -1 * vector[0] +   2 * vector[1] };
       // redundant 3rd coordinate: -1 * vector[0] -   1 * vector[1]

    /* Shift the arrow vector by the orbital coordinates */
    if (atom(orbit_col) == Atom::M && (atom(orbit_row) == Atom::X_A || atom(orbit_row) == Atom::X_B))
    {
        hom_vec[0] -=  1;
        // hom_vec[2] -= -1;
    }
    else if ((atom(orbit_col) == Atom::X_A || atom(orbit_col) == Atom::X_B) && atom(orbit_row) == Atom::M)
    {
        hom_vec[0] +=  1;
        // hom_vec[2] += -1;
    }

    /* Compute the distance to the origin: 
     * we use the identity r = x^2 + y^2 + z^2 = x^2 + y^2 + (x+y)^2 = 2 * (x * (x+y) + y^2) 
     */
    int r = hom_vec[0] * (hom_vec[0] + hom_vec[1]) + hom_vec[1]*hom_vec[1];
    
    switch (r)
    {
        case 0:
            return onsite[index(orbit_row)][index(orbit_col)];
        case 1:
        {
            if (hom_vec[0] == 0) 
                return H_d5[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[1] == 0) 
                return H_d4[index(orbit_row)][index(orbit_col)];
            else // hom_vec[2] == 0
                return H_d6[index(orbit_row)][index(orbit_col)];
        }
        case 3:
        {
            if (hom_vec[0] == -2)
                return H_posd1[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[0] == -1 && hom_vec[1] == -1)
                return H_posd2[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[1] == -2)
                return H_posd3[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[0] == 2)
                return H_negd1[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[0] == 1 && hom_vec[1] == 1)
                return H_negd2[index(orbit_row)][index(orbit_col)];
            else // (hom_vec[1] == 2)
                return H_negd3[index(orbit_row)][index(orbit_col)];
        }
        case 4:
        {
            if (hom_vec[0] == 0)
                return H_d7[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[1] == 0)
                return H_d8[index(orbit_row)][index(orbit_col)];
            else // hom_vec[2] == 0
                return H_d9[index(orbit_row)][index(orbit_col)];
        }
        default:
            return 0.;
    }   
}

double Coupling::Intralayer::MoSe2(const Orbital orbit_row, const Orbital orbit_col, 
                                        std::array<int, 2> vector)
{
    double onsite[11][11] = 
       {
            { 0.781900, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.781900, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.229700, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.014900, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.014900, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-1.476600, 0.000000, 0.000000,-0.304000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-1.476600, 0.000000, 0.000000,-0.304000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-1.779100, 0.000000, 0.000000, 1.122400},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.304000, 0.000000, 0.000000,-1.476600, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.304000, 0.000000, 0.000000,-1.476600, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.122400, 0.000000, 0.000000,-1.779100}
       };
    double H_posd1[11][11] = 
       {
            {-0.146000, 0.191200, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.191200, 0.017700, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.263600, 0.096000, 0.352000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.096000, 0.250500, 0.201200, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.352000,-0.201200,-0.473400, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.977450, 0.053700, 0.023050, 0.013650,-0.014300,-0.098550},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.053700,-0.088000,-0.034400, 0.014300, 0.084400,-0.039100},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.023050,-0.034400,-0.213900,-0.098550, 0.039100, 0.002700},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.013650,-0.014300, 0.098550, 0.977450, 0.053700,-0.023050},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.014300, 0.084400, 0.039100,-0.053700,-0.088000, 0.034400},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.098550,-0.039100, 0.002700, 0.023050, 0.034400,-0.213900}
       };
    double H_posd2[11][11] = 
       {
            {-0.023225,-0.262084, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.120316,-0.105075, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.263600, 0.352841,-0.092862, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.256841,-0.292425, 0.112258, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.259138, 0.514658, 0.069525, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.178362, 0.407653,-0.018266, 0.066712,-0.016336,-0.083137},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.515053, 0.711087, 0.037162,-0.044936, 0.031338,-0.065797},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.041316,-0.002762,-0.213900,-0.015413,-0.104897, 0.002700},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.066712,-0.016336, 0.083137, 0.178362, 0.407653, 0.018266},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.044936, 0.031338, 0.065797, 0.515053, 0.711087,-0.037162},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.015413, 0.104897, 0.002700, 0.041316, 0.002762,-0.213900}
       };
    double H_posd3[11][11] = 
       {
            {-0.023225, 0.262084, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.120316,-0.105075, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.263600,-0.352841,-0.092862, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.256841,-0.292425,-0.112258, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.259138,-0.514658, 0.069525, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.178362,-0.407653, 0.018266, 0.066712, 0.016336, 0.083137},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.515053, 0.711087, 0.037162, 0.044936, 0.031338,-0.065797},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.041316,-0.002762,-0.213900, 0.015413,-0.104897, 0.002700},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.066712, 0.016336,-0.083137, 0.178362,-0.407653,-0.018266},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.044936, 0.031338, 0.065797,-0.515053, 0.711087,-0.037162},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.015413, 0.104897, 0.002700,-0.041316, 0.002762,-0.213900}
       };
    double H_negd1[11][11] = 
       {
            {-0.146000,-0.191200, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.191200, 0.017700, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.263600,-0.096000, 0.352000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.096000, 0.250500,-0.201200, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.352000, 0.201200,-0.473400, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.977450,-0.053700,-0.023050, 0.013650, 0.014300, 0.098550},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.053700,-0.088000,-0.034400,-0.014300, 0.084400,-0.039100},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.023050,-0.034400,-0.213900, 0.098550, 0.039100, 0.002700},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.013650, 0.014300,-0.098550, 0.977450,-0.053700, 0.023050},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.014300, 0.084400, 0.039100, 0.053700,-0.088000, 0.034400},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.098550,-0.039100, 0.002700,-0.023050, 0.034400,-0.213900}
       };
    double H_negd2[11][11] = 
       {
            {-0.023225, 0.120316, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.262084,-0.105075, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.263600, 0.256841,-0.259138, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.352841,-0.292425, 0.514658, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.092862, 0.112258, 0.069525, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.178362, 0.515053,-0.041316, 0.066712,-0.044936, 0.015413},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.407653, 0.711087,-0.002762,-0.016336, 0.031338, 0.104897},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.018266, 0.037162,-0.213900, 0.083137, 0.065797, 0.002700},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.066712,-0.044936,-0.015413, 0.178362, 0.515053, 0.041316},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.016336, 0.031338,-0.104897, 0.407653, 0.711087, 0.002762},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.083137,-0.065797, 0.002700, 0.018266,-0.037162,-0.213900}
       };
    double H_negd3[11][11] = 
       {
            {-0.023225,-0.120316, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.262084,-0.105075, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.263600,-0.256841,-0.259138, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.352841,-0.292425,-0.514658, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.092862,-0.112258, 0.069525, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.178362,-0.515053, 0.041316, 0.066712, 0.044936,-0.015413},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.407653, 0.711087,-0.002762, 0.016336, 0.031338, 0.104897},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.018266, 0.037162,-0.213900,-0.083137, 0.065797, 0.002700},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.066712, 0.044936, 0.015413, 0.178362,-0.515053,-0.041316},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.016336, 0.031338,-0.104897,-0.407653, 0.711087, 0.002762},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.083137,-0.065797, 0.002700,-0.018266,-0.037162,-0.213900}
       };
    double H_d4[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.906847, 0.807137, 0.811883,-0.906847,-0.807137, 0.811883},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.807137,-0.025155, 0.468741,-0.807137, 0.025155, 0.468741},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.535091, 0.308935,-0.545886, 0.535091, 0.308935, 0.545886},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.518168,-0.218372, 0.525293, 0.518168,-0.218372,-0.525293},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.218372, 0.770322, 0.303278,-0.218372, 0.770322,-0.303278},
            { 0.906847, 0.807137, 0.535091, 0.518168,-0.218372, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.807137,-0.025155, 0.308935,-0.218372, 0.770322, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.811883, 0.468741,-0.545886, 0.525293, 0.303278, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.906847,-0.807137, 0.535091, 0.518168,-0.218372, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.807137, 0.025155, 0.308935,-0.218372, 0.770322, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.811883, 0.468741, 0.545886,-0.525293,-0.303278, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };
    double H_d5[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.491156, 0.000000, 0.000000, 0.491156, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.372848,-0.937482, 0.000000,-1.372848,-0.937482},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.617870,-0.545886, 0.000000,-0.617870, 0.545886},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.896399, 0.000000, 0.000000, 0.896399, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.392091,-0.606556, 0.000000, 0.392091, 0.606556},
            {-0.491156, 0.000000, 0.000000, 0.896399, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 1.372848,-0.617870, 0.000000, 0.392091, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000,-0.937482,-0.545886, 0.000000,-0.606556, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.491156, 0.000000, 0.000000, 0.896399, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000,-1.372848,-0.617870, 0.000000, 0.392091, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000,-0.937482, 0.545886, 0.000000, 0.606556, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };
    double H_d6[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.906847,-0.807137,-0.811883,-0.906847, 0.807137,-0.811883},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.807137,-0.025155, 0.468741, 0.807137, 0.025155, 0.468741},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.535091, 0.308935,-0.545886,-0.535091, 0.308935, 0.545886},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.518168, 0.218372,-0.525293, 0.518168, 0.218372, 0.525293},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.218372, 0.770322, 0.303278, 0.218372, 0.770322,-0.303278},
            { 0.906847,-0.807137,-0.535091, 0.518168, 0.218372, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.807137,-0.025155, 0.308935, 0.218372, 0.770322, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.811883, 0.468741,-0.545886,-0.525293, 0.303278, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.906847, 0.807137,-0.535091, 0.518168, 0.218372, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.807137, 0.025155, 0.308935, 0.218372, 0.770322, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.811883, 0.468741, 0.545886, 0.525293,-0.303278, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };
    double H_d7[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.109814,-0.048861, 0.000000,-0.109814, 0.048861},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.152311,-0.157473, 0.000000,-0.152311, 0.157473},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.109814, 0.000000,-0.152311, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.048861, 0.000000,-0.157473, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.109814, 0.000000,-0.152311, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.048861, 0.000000, 0.157473, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };
    double H_d8[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.095101, 0.054907,-0.048861, 0.095101, 0.054907, 0.048861},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.114233,-0.065953, 0.136375,-0.114233,-0.065953,-0.136375},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.065953,-0.038078, 0.078736,-0.065953,-0.038078,-0.078736},
            { 0.000000, 0.000000, 0.095101,-0.114233,-0.065953, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.054907,-0.065953,-0.038078, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.048861, 0.136375, 0.078736, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.095101,-0.114233,-0.065953, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.054907,-0.065953,-0.038078, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.048861,-0.136375,-0.078736, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };
    double H_d9[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.095101, 0.054907,-0.048861,-0.095101, 0.054907, 0.048861},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.114233, 0.065953,-0.136375,-0.114233, 0.065953, 0.136375},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.065953,-0.038078, 0.078736, 0.065953,-0.038078,-0.078736},
            { 0.000000, 0.000000,-0.095101,-0.114233, 0.065953, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.054907, 0.065953,-0.038078, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.048861,-0.136375, 0.078736, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.095101,-0.114233, 0.065953, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.054907, 0.065953,-0.038078, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.048861, 0.136375,-0.078736, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };



    /* Compute hexagonal homogeneous coordinates from grid coordinates.
     * We use the following system:
     *
     *                M                   M                 |             (-1,2,-1)            (1,1,-2)              
     *         (-1/2, sqrt(3)/2)                            |                                                       
     *                          .                           |                        (0,1,-1)                        
     *                                                      |                                                       
     *                X                   X                 |              (-1,1,0)            (1,0,-1)             
     *                                                      |                                                       
     *                                                      |                                                       
     *      M                   M                    M      |   (-2,1,1)             (0,0,0)              (2,-1,-1)   
     *                        (0,0)                (1,0)    |                                                       
     *                                                      |                                                       
     *                .                   .                 |              (-1,0,1)            (1,-1,0)              
     *                                                      |                                                       
     *                          X                           |                        (0,-1,1)                       
     *                                                      |                                                       
     *                M                   M                 |             (-1,-1,2)            (1,-2,1)             
     *                                                                    
     * In this system, the distance between a point and the center is still the euclidean distance, on all three coordinates.
     */
    std::array<int, 2> hom_vec = {   2 * vector[0] +  -1 * vector[1],
                                    -1 * vector[0] +   2 * vector[1] };
       // redundant 3rd coordinate: -1 * vector[0] -   1 * vector[1]

    /* Shift the arrow vector by the orbital coordinates */
    if (atom(orbit_col) == Atom::M && (atom(orbit_row) == Atom::X_A || atom(orbit_row) == Atom::X_B))
    {
        hom_vec[0] -=  1;
        // hom_vec[2] -= -1;
    }
    else if ((atom(orbit_col) == Atom::X_A || atom(orbit_col) == Atom::X_B) && atom(orbit_row) == Atom::M)
    {
        hom_vec[0] +=  1;
        // hom_vec[2] += -1;
    }

    /* Compute the distance to the origin: 
     * we use the identity r = x^2 + y^2 + z^2 = x^2 + y^2 + (x+y)^2 = 2 * (x * (x+y) + y^2) 
     */
    int r = hom_vec[0] * (hom_vec[0] + hom_vec[1]) + hom_vec[1]*hom_vec[1];
    
    switch (r)
    {
        case 0:
            return onsite[index(orbit_row)][index(orbit_col)];
        case 1:
        {
            if (hom_vec[0] == 0) 
                return H_d5[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[1] == 0) 
                return H_d4[index(orbit_row)][index(orbit_col)];
            else // hom_vec[2] == 0
                return H_d6[index(orbit_row)][index(orbit_col)];
        }
        case 3:
        {
            if (hom_vec[0] == -2)
                return H_posd1[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[0] == -1 && hom_vec[1] == -1)
                return H_posd2[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[1] == -2)
                return H_posd3[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[0] == 2)
                return H_negd1[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[0] == 1 && hom_vec[1] == 1)
                return H_negd2[index(orbit_row)][index(orbit_col)];
            else // (hom_vec[1] == 2)
                return H_negd3[index(orbit_row)][index(orbit_col)];
        }
        case 4:
        {
            if (hom_vec[0] == 0)
                return H_d7[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[1] == 0)
                return H_d8[index(orbit_row)][index(orbit_col)];
            else // hom_vec[2] == 0
                return H_d9[index(orbit_row)][index(orbit_col)];
        }
        default:
            return 0.;
    }   
}

double Coupling::Intralayer::WS2(const Orbital orbit_row,   const Orbital orbit_col, 
                                        std::array<int, 2> vector)
{
    const double onsite[11][11] = 
       {
            { 1.375400, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 1.375400, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.039300, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.198400, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.198400, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-1.949750, 0.000000, 0.000000,-0.396350, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-1.949750, 0.000000, 0.000000,-0.396350, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-2.249200, 0.000000, 0.000000, 1.121400},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.396350, 0.000000, 0.000000,-1.949750, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.396350, 0.000000, 0.000000,-1.949750, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.121400, 0.000000, 0.000000,-2.249200}
       };
    const double H_posd1[11][11] = 
       {
            {-0.201100, 0.310600, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.310600, 0.026300, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.371600, 0.146700, 0.489600, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.146700, 0.353700, 0.303000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.489600,-0.303000,-0.689200, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.919950, 0.100350, 0.027000, 0.047350, 0.001450,-0.137500},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.100350,-0.102200,-0.056650,-0.001450, 0.116500,-0.025150},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.027000,-0.056650,-0.193050,-0.137500, 0.025150, 0.018150},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.047350, 0.001450, 0.137500, 0.919950, 0.100350,-0.027000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.001450, 0.116500, 0.025150,-0.100350,-0.102200, 0.056650},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.137500,-0.025150, 0.018150, 0.027000, 0.056650,-0.193050}
       };
    const double H_posd2[11][11] = 
       {
            {-0.030550,-0.409067, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.212133,-0.144250, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.371600, 0.497356,-0.117754, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.350656,-0.428475, 0.148589, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.371846, 0.754589, 0.092975, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.153338, 0.342254,-0.035560, 0.099212,-0.031393,-0.090531},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.542954, 0.664412, 0.051708,-0.028493, 0.064638,-0.106503},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.062560, 0.004942,-0.193050,-0.046969,-0.131653, 0.018150},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.099212,-0.031393, 0.090531, 0.153338, 0.342254, 0.035560},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.028493, 0.064638, 0.106503, 0.542954, 0.664412,-0.051708},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.046969, 0.131653, 0.018150, 0.062560,-0.004942,-0.193050}
       };
    const double H_posd3[11][11] = 
       {
            {-0.030550, 0.409067, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.212133,-0.144250, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.371600,-0.497356,-0.117754, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.350656,-0.428475,-0.148589, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.371846,-0.754589, 0.092975, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.153338,-0.342254, 0.035560, 0.099212, 0.031393, 0.090531},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.542954, 0.664412, 0.051708, 0.028493, 0.064638,-0.106503},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.062560, 0.004942,-0.193050, 0.046969,-0.131653, 0.018150},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.099212, 0.031393,-0.090531, 0.153338,-0.342254,-0.035560},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.028493, 0.064638, 0.106503,-0.542954, 0.664412,-0.051708},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.046969, 0.131653, 0.018150,-0.062560,-0.004942,-0.193050}
       };
    const double H_negd1[11][11] = 
       {
            {-0.201100,-0.310600, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.310600, 0.026300, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.371600,-0.146700, 0.489600, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.146700, 0.353700,-0.303000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.489600, 0.303000,-0.689200, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.919950,-0.100350,-0.027000, 0.047350,-0.001450, 0.137500},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.100350,-0.102200,-0.056650, 0.001450, 0.116500,-0.025150},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.027000,-0.056650,-0.193050, 0.137500, 0.025150, 0.018150},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.047350,-0.001450,-0.137500, 0.919950,-0.100350, 0.027000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.001450, 0.116500, 0.025150, 0.100350,-0.102200, 0.056650},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.137500,-0.025150, 0.018150,-0.027000, 0.056650,-0.193050}
       };
    const double H_negd2[11][11] = 
       {
            {-0.030550, 0.212133, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.409067,-0.144250, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.371600, 0.350656,-0.371846, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.497356,-0.428475, 0.754589, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.117754, 0.148589, 0.092975, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.153338, 0.542954,-0.062560, 0.099212,-0.028493, 0.046969},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.342254, 0.664412, 0.004942,-0.031393, 0.064638, 0.131653},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.035560, 0.051708,-0.193050, 0.090531, 0.106503, 0.018150},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.099212,-0.028493,-0.046969, 0.153338, 0.542954, 0.062560},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.031393, 0.064638,-0.131653, 0.342254, 0.664412,-0.004942},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.090531,-0.106503, 0.018150, 0.035560,-0.051708,-0.193050}
       };
    const double H_negd3[11][11] = 
       {
            {-0.030550,-0.212133, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.409067,-0.144250, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.371600,-0.350656,-0.371846, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.497356,-0.428475,-0.754589, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.117754,-0.148589, 0.092975, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.153338,-0.542954, 0.062560, 0.099212, 0.028493,-0.046969},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.342254, 0.664412, 0.004942, 0.031393, 0.064638, 0.131653},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.035560, 0.051708,-0.193050,-0.090531, 0.106503, 0.018150},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.099212, 0.028493, 0.046969, 0.153338,-0.542954,-0.062560},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.031393, 0.064638,-0.131653,-0.342254, 0.664412,-0.004942},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.090531,-0.106503, 0.018150,-0.035560,-0.051708,-0.193050}
       };
    const double H_d4[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.069640, 0.979061, 0.880347,-1.069640,-0.979061, 0.880347},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.979061,-0.060882, 0.508268,-0.979061, 0.060882, 0.508268},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.604901, 0.349240,-0.716299, 0.604901, 0.349240, 0.716299},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.632560,-0.272843, 0.581203, 0.632560,-0.272843,-0.581203},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.272843, 0.947611, 0.335558,-0.272843, 0.947611,-0.335558},
            { 1.069640, 0.979061, 0.604901, 0.632560,-0.272843, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.979061,-0.060882, 0.349240,-0.272843, 0.947611, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.880347, 0.508268,-0.716299, 0.581203, 0.335558, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-1.069640,-0.979061, 0.604901, 0.632560,-0.272843, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.979061, 0.060882, 0.349240,-0.272843, 0.947611, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.880347, 0.508268, 0.716299,-0.581203,-0.335558, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };
    const double H_d5[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.626143, 0.000000, 0.000000, 0.626143, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.634902,-1.016537, 0.000000,-1.634902,-1.016537},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.698480,-0.716299, 0.000000,-0.698480, 0.716299},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.105137, 0.000000, 0.000000, 1.105137, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.475034,-0.671115, 0.000000, 0.475034, 0.671115},
            {-0.626143, 0.000000, 0.000000, 1.105137, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 1.634902,-0.698480, 0.000000, 0.475034, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000,-1.016537,-0.716299, 0.000000,-0.671115, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.626143, 0.000000, 0.000000, 1.105137, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000,-1.634902,-0.698480, 0.000000, 0.475034, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000,-1.016537, 0.716299, 0.000000, 0.671115, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };
    const double H_d6[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.069640,-0.979061,-0.880347,-1.069640, 0.979061,-0.880347},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.979061,-0.060882, 0.508268, 0.979061, 0.060882, 0.508268},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.604901, 0.349240,-0.716299,-0.604901, 0.349240, 0.716299},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.632560, 0.272843,-0.581203, 0.632560, 0.272843, 0.581203},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.272843, 0.947611, 0.335558, 0.272843, 0.947611,-0.335558},
            { 1.069640,-0.979061,-0.604901, 0.632560, 0.272843, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.979061,-0.060882, 0.349240, 0.272843, 0.947611, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.880347, 0.508268,-0.716299,-0.581203, 0.335558, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-1.069640, 0.979061,-0.604901, 0.632560, 0.272843, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.979061, 0.060882, 0.349240, 0.272843, 0.947611, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            {-0.880347, 0.508268, 0.716299, 0.581203,-0.335558, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };
    const double H_d7[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.108399,-0.046598, 0.000000,-0.108399, 0.046598},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.193464,-0.185121, 0.000000,-0.193464, 0.185121},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.108399, 0.000000,-0.193464, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.046598, 0.000000,-0.185121, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.108399, 0.000000,-0.193464, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.046598, 0.000000, 0.185121, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };
    const double H_d8[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.093877, 0.054200,-0.046598, 0.093877, 0.054200, 0.046598},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.145098,-0.083773, 0.160319,-0.145098,-0.083773,-0.160319},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.083773,-0.048366, 0.092560,-0.083773,-0.048366,-0.092560},
            { 0.000000, 0.000000, 0.093877,-0.145098,-0.083773, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.054200,-0.083773,-0.048366, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.046598, 0.160319, 0.092560, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.093877,-0.145098,-0.083773, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.054200,-0.083773,-0.048366, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.046598,-0.160319,-0.092560, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };
    const double H_d9[11][11] = 
       {
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.093877, 0.054200,-0.046598,-0.093877, 0.054200, 0.046598},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,-0.145098, 0.083773,-0.160319,-0.145098, 0.083773, 0.160319},
            { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.083773,-0.048366, 0.092560, 0.083773,-0.048366,-0.092560},
            { 0.000000, 0.000000,-0.093877,-0.145098, 0.083773, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.054200, 0.083773,-0.048366, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.046598,-0.160319, 0.092560, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000,-0.093877,-0.145098, 0.083773, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.054200, 0.083773,-0.048366, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000},
            { 0.000000, 0.000000, 0.046598, 0.160319,-0.092560, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000}
       };

    /* Compute hexagonal homogeneous coordinates from grid coordinates.
     * We use the following system:
     *
     *                M                   M                 |             (-1,2,-1)            (1,1,-2)              
     *         (-1/2, sqrt(3)/2)                            |                                                       
     *                          .                           |                        (0,1,-1)                        
     *                                                      |                                                       
     *                X                   X                 |              (-1,1,0)            (1,0,-1)             
     *                                                      |                                                       
     *                                                      |                                                       
     *      M                   M                    M      |   (-2,1,1)             (0,0,0)              (2,-1,-1)   
     *                        (0,0)                (1,0)    |                                                       
     *                                                      |                                                       
     *                .                   .                 |              (-1,0,1)            (1,-1,0)              
     *                                                      |                                                       
     *                          X                           |                        (0,-1,1)                       
     *                                                      |                                                       
     *                M                   M                 |             (-1,-1,2)            (1,-2,1)             
     *                                                                    
     * In this system, the distance between a point and the center is still the euclidean distance, on all three coordinates.
     */
    std::array<int, 2> hom_vec = {   2 * vector[0] +  -1 * vector[1],
                                    -1 * vector[0] +   2 * vector[1] };
       // redundant 3rd coordinate: -1 * vector[0] -   1 * vector[1]

    /* Shift the arrow vector by the orbital coordinates */
    if (atom(orbit_col) == Atom::M && (atom(orbit_row) == Atom::X_A || atom(orbit_row) == Atom::X_B))
    {
        hom_vec[0] -=  1;
        // hom_vec[2] -= -1;
    }
    else if ((atom(orbit_col) == Atom::X_A || atom(orbit_col) == Atom::X_B) && atom(orbit_row) == Atom::M)
    {
        hom_vec[0] +=  1;
        // hom_vec[2] += -1;
    }

    /* Compute the distance to the origin: 
     * we use the identity r = x^2 + y^2 + z^2 = x^2 + y^2 + (x+y)^2 = 2 * (x * (x+y) + y^2) 
     */
    int r = hom_vec[0] * (hom_vec[0] + hom_vec[1]) + hom_vec[1]*hom_vec[1];
    
    switch (r)
    {
        case 0:
            return onsite[index(orbit_row)][index(orbit_col)];
        case 1:
        {
            if (hom_vec[0] == 0) 
                return H_d5[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[1] == 0) 
                return H_d4[index(orbit_row)][index(orbit_col)];
            else // hom_vec[2] == 0
                return H_d6[index(orbit_row)][index(orbit_col)];
        }
        case 3:
        {
            if (hom_vec[0] == -2)
                return H_posd1[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[0] == -1 && hom_vec[1] == -1)
                return H_posd2[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[1] == -2)
                return H_posd3[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[0] == 2)
                return H_negd1[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[0] == 1 && hom_vec[1] == 1)
                return H_negd2[index(orbit_row)][index(orbit_col)];
            else // (hom_vec[1] == 2)
                return H_negd3[index(orbit_row)][index(orbit_col)];
        }
        case 4:
        {
            if (hom_vec[0] == 0)
                return H_d7[index(orbit_row)][index(orbit_col)];
            else if (hom_vec[1] == 0)
                return H_d8[index(orbit_row)][index(orbit_col)];
            else // hom_vec[2] == 0
                return H_d9[index(orbit_row)][index(orbit_col)];
        }
        default:
            return 0.;
    }   
}


double Coupling::Interlayer::S_to_S(const Orbital orbit_row,    const Orbital orbit_col, 
                                        std::array<double, 3> vector, 
                                        const double theta_row, const double theta_col) 
{   
    const double nu_sigma   =  2.627;   const double nu_pi      = -0.708;
    const double R_sigma    =  3.128;   const double R_pi       =  2.923;
    const double eta_sigma  =  3.859;   const double eta_pi     =  5.724;
    
    const double XX_sep     = (12.29/2.0) - 3.130;

    /*                          Shift the arrow vector by the orbital coordinates                               */
    /* Simplification: we assume that Atom M is at the origin, and X_A / X_B have the same in-plane coordinates */
    switch (atom(orbit_col))
    {
        case Atom::M:
        {
            switch (atom(orbit_row))
            {
                case Atom::M: 
                    break;
                case Atom::X_A:
                {
                    vector[0] -=  cos(theta_row) * MS2::atom_pos.at (Atom::X_A)[0] + sin(theta_row) * MS2::atom_pos.at (Atom::X_A)[1];
                    vector[1] -= -sin(theta_row) * MS2::atom_pos.at (Atom::X_A)[0] + cos(theta_row) * MS2::atom_pos.at (Atom::X_A)[1];
                    vector[2] -= MS2::atom_pos.at (Atom::X_A)[2];
                    break;
                }
                case Atom::X_B:
                {
                    vector[0] -=  cos(theta_row) * MS2::atom_pos.at (Atom::X_B)[0] + sin(theta_row) * MS2::atom_pos.at (Atom::X_B)[1];
                    vector[1] -= -sin(theta_row) * MS2::atom_pos.at (Atom::X_B)[0] + cos(theta_row) * MS2::atom_pos.at (Atom::X_B)[1];
                    vector[2] -= MS2::atom_pos.at (Atom::X_B)[2];
                    break;
                }
            }
            break;
        }
        case Atom::X_A:
        {
            switch (atom(orbit_row))
            {
                case Atom::M:
                {
                    vector[0] +=  cos(theta_col) * MS2::atom_pos.at (Atom::X_A)[0] + sin(theta_col) * MS2::atom_pos.at (Atom::X_A)[1];
                    vector[1] += -sin(theta_col) * MS2::atom_pos.at (Atom::X_A)[0] + cos(theta_col) * MS2::atom_pos.at (Atom::X_A)[1];
                    vector[2] += MS2::atom_pos.at (Atom::X_A)[2];
                    break;
                }
                case Atom::X_A:
                    break;
                case Atom::X_B:
                {
                    vector[2] += MS2::atom_pos.at (Atom::X_A)[2] - MS2::atom_pos.at (Atom::X_B)[2];
                    break;
                }
            }
            break;
        }
        case Atom::X_B:
        {
            switch (atom(orbit_row))
            {
                case Atom::M:
                {
                    vector[0] +=  cos(theta_col) * MS2::atom_pos.at (Atom::X_B)[0] + sin(theta_col) * MS2::atom_pos.at (Atom::X_B)[1];
                    vector[1] += -sin(theta_col) * MS2::atom_pos.at (Atom::X_B)[0] + cos(theta_col) * MS2::atom_pos.at (Atom::X_B)[1];
                    vector[2] += MS2::atom_pos.at (Atom::X_B)[2];
                    break;
                }
                case Atom::X_A:
                {
                    vector[2] += MS2::atom_pos.at (Atom::X_B)[2] - MS2::atom_pos.at (Atom::X_A)[2];
                    break;
                }
                case Atom::X_B:
                    break;
            }
            break;
        }
    }
    
    if ( (vector[0]*vector[0] + vector[1]*vector[1] < TMDC::inter_cutoff_radius * TMDC::inter_cutoff_radius) 
                        && (std::abs(std::abs(vector[3]) - XX_sep) < 0.05))
    {
        assert( (atom(orbit_row) == Atom::X_A && atom(orbit_col) == Atom::X_B) 
                || (atom(orbit_row) == Atom::X_B && atom(orbit_col) == Atom::X_A) );

        double r_sq = vector[0]*vector[0] + vector[1]*vector[1] + vector[2]*vector[2];
        double r = std::sqrt(r_sq);
        /* Determine character of p orbit */
        int p_row = (index(orbit_row) - 5) % 3;
        int p_col = (index(orbit_col) - 5) % 3;
        
        double V_sigma = nu_sigma*std::exp(-std::pow(r/R_sigma, eta_sigma));
        double V_pi    =    nu_pi*std::exp(-std::pow(r/R_pi,    eta_pi   ));
        
        return (V_sigma - V_pi)*(vector[p_row] * vector[p_col] / r_sq) + (p_row == p_col ? V_pi : 0);
    }
    else
        return 0;
}


double Coupling::Interlayer::Se_to_Se(const Orbital orbit_row,  const Orbital orbit_col, 
                                        std::array<double, 3> vector, 
                                        const double theta_row, const double theta_col) 
{   
    const double    nu_sigma    =  2.559;   const double    nu_pi       = -1.006;
    const double    R_sigma     =  3.337;   const double    R_pi        =  2.927;
    const double    eta_sigma   =  4.114;   const double    eta_pi      =  5.185;
        
    const double XX_sep = (12.96/2.0) - 3.350;

    /*                          Shift the arrow vector by the orbital coordinates                               */
    /* Simplification: we assume that Atom M is at the origin, and X_A / X_B have the same in-plane coordinates */
    switch (atom(orbit_col))
    {
        case Atom::M:
        {
            switch (atom(orbit_row))
            {
                case Atom::M: 
                    break;
                case Atom::X_A:
                {
                    vector[0] -=  cos(theta_row) * MSe2::atom_pos.at (Atom::X_A)[0] + sin(theta_row) * MSe2::atom_pos.at (Atom::X_A)[1];
                    vector[1] -= -sin(theta_row) * MSe2::atom_pos.at (Atom::X_A)[0] + cos(theta_row) * MSe2::atom_pos.at (Atom::X_A)[1];
                    vector[2] -= MSe2::atom_pos.at (Atom::X_A)[2];
                    break;
                }
                case Atom::X_B:
                {
                    vector[0] -=  cos(theta_row) * MSe2::atom_pos.at (Atom::X_B)[0] + sin(theta_row) * MSe2::atom_pos.at (Atom::X_B)[1];
                    vector[1] -= -sin(theta_row) * MSe2::atom_pos.at (Atom::X_B)[0] + cos(theta_row) * MSe2::atom_pos.at (Atom::X_B)[1];
                    vector[2] -= MSe2::atom_pos.at (Atom::X_B)[2];
                    break;
                }
            }
            break;
        }
        case Atom::X_A:
        {
            switch (atom(orbit_row))
            {
                case Atom::M:
                {
                    vector[0] +=  cos(theta_col) * MSe2::atom_pos.at (Atom::X_A)[0] + sin(theta_col) * MSe2::atom_pos.at (Atom::X_A)[1];
                    vector[1] += -sin(theta_col) * MSe2::atom_pos.at (Atom::X_A)[0] + cos(theta_col) * MSe2::atom_pos.at (Atom::X_A)[1];
                    vector[2] += MSe2::atom_pos.at (Atom::X_A)[2];
                    break;
                }
                case Atom::X_A:
                    break;
                case Atom::X_B:
                {
                    vector[2] += MSe2::atom_pos.at (Atom::X_A)[2] - MSe2::atom_pos.at (Atom::X_B)[2];
                    break;
                }
            }
            break;
        }
        case Atom::X_B:
        {
            switch (atom(orbit_row))
            {
                case Atom::M:
                {
                    vector[0] +=  cos(theta_col) * MSe2::atom_pos.at (Atom::X_B)[0] + sin(theta_col) * MSe2::atom_pos.at (Atom::X_B)[1];
                    vector[1] += -sin(theta_col) * MSe2::atom_pos.at (Atom::X_B)[0] + cos(theta_col) * MSe2::atom_pos.at (Atom::X_B)[1];
                    vector[2] += MSe2::atom_pos.at (Atom::X_B)[2];
                    break;
                }
                case Atom::X_A:
                {
                    vector[2] += MSe2::atom_pos.at (Atom::X_B)[2] - MSe2::atom_pos.at (Atom::X_A)[2];
                    break;
                }
                case Atom::X_B:
                    break;
            }
            break;
        }
    }
    
    if ( (vector[0]*vector[0] + vector[1]*vector[1] < TMDC::inter_cutoff_radius * TMDC::inter_cutoff_radius) 
                        && (std::abs(std::abs(vector[3]) - XX_sep) < 0.05))
    {
        assert( (atom(orbit_row) == Atom::X_A && atom(orbit_col) == Atom::X_B) 
                || (atom(orbit_row) == Atom::X_B && atom(orbit_col) == Atom::X_A) );

        double r_sq = vector[0]*vector[0] + vector[1]*vector[1] + vector[2]*vector[2];
        double r = std::sqrt(r_sq);
        /* Determine character of p orbit */
        int p_row = (index(orbit_row) - 5) % 3;
        int p_col = (index(orbit_col) - 5) % 3;
        
        double V_sigma = nu_sigma*std::exp(-std::pow(r/R_sigma, eta_sigma));
        double V_pi    =    nu_pi*std::exp(-std::pow(r/R_pi,    eta_pi   ));
        
        return (V_sigma - V_pi)*(vector[p_row] * vector[p_col] / r_sq) + (p_row == p_col ? V_pi : 0);
    }
    else
        return 0;
}


bool IsNonZero::Intralayer::TMDC(const Orbital orbit_row,  const Orbital orbit_col, 
                                        std::array<int, 2> vector)
{
    /* Lookup table of coefficients */
    const bool onsite[11][11] = 
       {
            { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0},
            { 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0},
            { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1},
            { 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0},
            { 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0},
            { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1}
       };
    const bool next_nearest[11][11] = 
       {
            { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
            { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
            { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
            { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
            { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
            { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
            { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
            { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1}
       };
    const bool nearest[11][11] = 
       {
            { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
            { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
            { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
            { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
            { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
            { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
            { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
            { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
            { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
            { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
            { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0}
       };
    const bool nearest_vert[11][11] = 
       {
            { 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0},
            { 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1},
            { 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1},
            { 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0},
            { 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1},
            { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
            { 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0},
            { 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0},
            { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
            { 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0},
            { 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0} 
       };
    const bool next_next_nearest[11][11] = 
       {
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
            { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
            { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
            { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
            { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
            { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
            { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
            { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
            { 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0}
       };
    const bool next_next_nearest_vert[11][11] = 
       {
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0},
            { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
            { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0},
            { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0}
       };
    /**
     * Compute hexagonal homogeneous coordinates from grid coordinates.
     * We use the following system:
     *
     *                M                   M                 |             (-1,2,-1)            (1,1,-2)              
     *         (-1/2, sqrt(3)/2)                            |                                                       
     *                          .                           |                        (0,1,-1)                        
     *                                                      |                                                       
     *                X                   X                 |              (-1,1,0)            (1,0,-1)             
     *                                                      |                                                       
     *                                                      |                                                       
     *      M                   M                    M      |   (-2,1,1)             (0,0,0)              (2,-1,-1)   
     *                        (0,0)                (1,0)    |                                                       
     *                                                      |                                                       
     *                .                   .                 |              (-1,0,1)            (1,-1,0)              
     *                                                      |                                                       
     *                          X                           |                        (0,-1,1)                       
     *                                                      |                                                       
     *                M                   M                 |             (-1,-1,2)            (1,-2,1)             
     *                                                                    
     * In this system, the distance between a point and the center is still the euclidean distance, on all three coordinates.
     */
    std::array<int, 2> hom_vec = {   2 * vector[0] +  -1 * vector[1],
                                    -1 * vector[0] +   2 * vector[1] };
       // redundant 3rd coordinate: -1 * vector[0] -   1 * vector[1]

    /* Shift the arrow vector by the orbital coordinates */
    if (atom(orbit_col) == Atom::M && (atom(orbit_row) == Atom::X_A || atom(orbit_row) == Atom::X_B))
    {
        hom_vec[0] -=  1;
        // hom_vec[2] -= -1;
    }
    else if ((atom(orbit_col) == Atom::X_A || atom(orbit_col) == Atom::X_B) && atom(orbit_row) == Atom::M)
    {
        hom_vec[0] +=  1;
        // hom_vec[2] += -1;
    }

    /* Compute the distance to the origin: 
     * we use the identity r^2 = x^2 + y^2 + z^2 = x^2 + y^2 + (x+y)^2 = 2 * (x * (x+y) + y^2) 
     */
    int r = hom_vec[0] * (hom_vec[0] + hom_vec[1]) + hom_vec[1]*hom_vec[1];
    
    switch (r)
    {
        case 0:
            return onsite[index(orbit_row)][index(orbit_col)];
        case 1:
        {
            if (hom_vec[0] == 0) 
                return nearest_vert[index(orbit_row)][index(orbit_col)];
            else
                return nearest[index(orbit_row)][index(orbit_col)];
        }
        case 3:
            return next_nearest[index(orbit_row)][index(orbit_col)];
        case 4:
        {
            if (hom_vec[0] == 0)
                return next_next_nearest_vert[index(orbit_row)][index(orbit_col)];
            else
                return next_next_nearest[index(orbit_row)][index(orbit_col)];
        }
        default:
            return false;
    }   
}


bool IsNonZero::Interlayer::S_to_S(const Orbital orbit_row,  const Orbital orbit_col, 
                                        std::array<double, 3> vector, 
                                        const double theta_row, const double theta_col) 
{       

    /*                          Shift the arrow vector by the orbital coordinates                               */
    /* Simplification: we assume that Atom M is at the origin, and X_A / X_B have the same in-plane coordinates */
    switch (atom(orbit_col))
    {
        case Atom::M:
        {
            switch (atom(orbit_row))
            {
                case Atom::M: 
                    break;
                case Atom::X_A:
                {
                    vector[0] -=  cos(theta_row) * MSe2::atom_pos.at (Atom::X_A)[0] + sin(theta_row) * MSe2::atom_pos.at (Atom::X_A)[1];
                    vector[1] -= -sin(theta_row) * MSe2::atom_pos.at (Atom::X_A)[0] + cos(theta_row) * MSe2::atom_pos.at (Atom::X_A)[1];
                    vector[2] -= MSe2::atom_pos.at (Atom::X_A)[2];
                    break;
                }
                case Atom::X_B:
                {
                    vector[0] -=  cos(theta_row) * MSe2::atom_pos.at (Atom::X_B)[0] + sin(theta_row) * MSe2::atom_pos.at (Atom::X_B)[1];
                    vector[1] -= -sin(theta_row) * MSe2::atom_pos.at (Atom::X_B)[0] + cos(theta_row) * MSe2::atom_pos.at (Atom::X_B)[1];
                    vector[2] -= MSe2::atom_pos.at (Atom::X_B)[2];
                    break;
                }
            }
            break;
        }
        case Atom::X_A:
        {
            switch (atom(orbit_row))
            {
                case Atom::M:
                {
                    vector[0] +=  cos(theta_col) * MSe2::atom_pos.at (Atom::X_A)[0] + sin(theta_col) * MSe2::atom_pos.at (Atom::X_A)[1];
                    vector[1] += -sin(theta_col) * MSe2::atom_pos.at (Atom::X_A)[0] + cos(theta_col) * MSe2::atom_pos.at (Atom::X_A)[1];
                    vector[2] += MSe2::atom_pos.at (Atom::X_A)[2];
                    break;
                }
                case Atom::X_A:
                    break;
                case Atom::X_B:
                {
                    vector[2] += MSe2::atom_pos.at (Atom::X_A)[2] - MSe2::atom_pos.at (Atom::X_B)[2];
                    break;
                }
            }
            break;
        }
        case Atom::X_B:
        {
            switch (atom(orbit_row))
            {
                case Atom::M:
                {
                    vector[0] +=  cos(theta_col) * MSe2::atom_pos.at (Atom::X_B)[0] + sin(theta_col) * MSe2::atom_pos.at (Atom::X_B)[1];
                    vector[1] += -sin(theta_col) * MSe2::atom_pos.at (Atom::X_B)[0] + cos(theta_col) * MSe2::atom_pos.at (Atom::X_B)[1];
                    vector[2] += MSe2::atom_pos.at (Atom::X_B)[2];
                    break;
                }
                case Atom::X_A:
                {
                    vector[2] += MSe2::atom_pos.at (Atom::X_B)[2] - MSe2::atom_pos.at (Atom::X_A)[2];
                    break;
                }
                case Atom::X_B:
                    break;
            }
            break;
        }
    }
    const double XX_sep = (12.29/2.0) - 3.130;
    return ( (vector[0]*vector[0] + vector[1]*vector[1] < TMDC::inter_cutoff_radius * TMDC::inter_cutoff_radius) 
                        && (std::abs(std::abs(vector[3]) - XX_sep) < 0.05));
}

bool IsNonZero::Interlayer::Se_to_Se(const Orbital orbit_row,  const Orbital orbit_col, 
                                        std::array<double, 3> vector, 
                                        const double theta_row, const double theta_col) 
{       

    /*                          Shift the arrow vector by the orbital coordinates                               */
    /* Simplification: we assume that Atom M is at the origin, and X_A / X_B have the same in-plane coordinates */
    switch (atom(orbit_col))
    {
        case Atom::M:
        {
            switch (atom(orbit_row))
            {
                case Atom::M: 
                    break;
                case Atom::X_A:
                {
                    vector[0] -=  cos(theta_row) * MSe2::atom_pos.at (Atom::X_A)[0] + sin(theta_row) * MSe2::atom_pos.at (Atom::X_A)[1];
                    vector[1] -= -sin(theta_row) * MSe2::atom_pos.at (Atom::X_A)[0] + cos(theta_row) * MSe2::atom_pos.at (Atom::X_A)[1];
                    vector[2] -= MSe2::atom_pos.at (Atom::X_A)[2];
                    break;
                }
                case Atom::X_B:
                {
                    vector[0] -=  cos(theta_row) * MSe2::atom_pos.at (Atom::X_B)[0] + sin(theta_row) * MSe2::atom_pos.at (Atom::X_B)[1];
                    vector[1] -= -sin(theta_row) * MSe2::atom_pos.at (Atom::X_B)[0] + cos(theta_row) * MSe2::atom_pos.at (Atom::X_B)[1];
                    vector[2] -= MSe2::atom_pos.at (Atom::X_B)[2];
                    break;
                }
            }
            break;
        }
        case Atom::X_A:
        {
            switch (atom(orbit_row))
            {
                case Atom::M:
                {
                    vector[0] +=  cos(theta_col) * MSe2::atom_pos.at (Atom::X_A)[0] + sin(theta_col) * MSe2::atom_pos.at (Atom::X_A)[1];
                    vector[1] += -sin(theta_col) * MSe2::atom_pos.at (Atom::X_A)[0] + cos(theta_col) * MSe2::atom_pos.at (Atom::X_A)[1];
                    vector[2] += MSe2::atom_pos.at (Atom::X_A)[2];
                    break;
                }
                case Atom::X_A:
                    break;
                case Atom::X_B:
                {
                    vector[2] += MSe2::atom_pos.at (Atom::X_A)[2] - MSe2::atom_pos.at (Atom::X_B)[2];
                    break;
                }
            }
            break;
        }
        case Atom::X_B:
        {
            switch (atom(orbit_row))
            {
                case Atom::M:
                {
                    vector[0] +=  cos(theta_col) * MSe2::atom_pos.at (Atom::X_B)[0] + sin(theta_col) * MSe2::atom_pos.at (Atom::X_B)[1];
                    vector[1] += -sin(theta_col) * MSe2::atom_pos.at (Atom::X_B)[0] + cos(theta_col) * MSe2::atom_pos.at (Atom::X_B)[1];
                    vector[2] += MSe2::atom_pos.at (Atom::X_B)[2];
                    break;
                }
                case Atom::X_A:
                {
                    vector[2] += MSe2::atom_pos.at (Atom::X_B)[2] - MSe2::atom_pos.at (Atom::X_A)[2];
                    break;
                }
                case Atom::X_B:
                    break;
            }
            break;
        }
    }
    const double XX_sep = (12.96/2.0) - 3.350;
    return ( (vector[0]*vector[0] + vector[1]*vector[1] < TMDC::inter_cutoff_radius * TMDC::inter_cutoff_radius) 
                        && (std::abs(std::abs(vector[3]) - XX_sep) < 0.05));
}
